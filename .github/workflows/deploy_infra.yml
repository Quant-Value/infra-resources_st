name: Deploy Infrastructure

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    # Define una variable de entorno para el directorio de trabajo
    env:
      TF_WORKING_DIR: ./terraform  # Aquí defines tu directorio

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Install jq and Parse User Info
      run: |
        # Instala jq para parsear el JSON
        sudo apt-get install jq

        # Obtén el nombre del autor del commit (por ejemplo, GitHub Actor o un campo personalizado)
        USERNAME="${GITHUB_ACTOR}"

        # Obtener el nombre del secreto de AWS para el usuario (mapeo desde el archivo JSON)
        AWS_ACCESS_KEY_ID_SECRET=$(jq -r ".\"$USERNAME\".AWS_ACCESS_KEY_ID" ./docs/users.json)
        AWS_SECRET_ACCESS_KEY_SECRET=$(jq -r ".\"$USERNAME\".AWS_SECRET_ACCESS_KEY" ./docs/users.json)
        AWS_SESSION_TOKEN_SECRET=$(jq -r ".\"$USERNAME\".AWS_SESSION_TOKEN" ./docs/users.json)

        # Obtener los valores de los secretos de GitHub basados en el nombre del secreto
        AWS_ACCESS_KEY_ID="${{ secrets[$AWS_ACCESS_KEY_ID_SECRET] }}"
        AWS_SECRET_ACCESS_KEY="${{ secrets[$AWS_SECRET_ACCESS_KEY_SECRET] }}"
        AWS_SESSION_TOKEN="${{ secrets[$AWS_SESSION_TOKEN_SECRET] }}"

        # Exportar las variables para usarlas en pasos posteriores
        echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
        echo "AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> $GITHUB_ENV

        # Imprimir las credenciales para debug (solo se hará si el paso se ejecuta correctamente)
        echo "AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
        echo "AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY"
        echo "AWS_SESSION_TOKEN: $AWS_SESSION_TOKEN"

    - name: Install Terraform
      run: |
        sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
        wget -O- https://apt.releases.hashicorp.com/gpg | \
        gpg --dearmor | \
        sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
        gpg --no-default-keyring \
        --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
        --fingerprint
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
        https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
        sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update
        sudo apt-get install terraform

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TF_WORKING_DIR }}  # Usando la variable de entorno

    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ env.TF_WORKING_DIR }}  # Usando la variable de entorno

    - name: Terraform Plan
      run: terraform plan
      working-directory: ${{ env.TF_WORKING_DIR }}  # Usando la variable de entorno

    - name: Deploy with Terraform
      run: terraform apply -auto-approve
      working-directory: ${{ env.TF_WORKING_DIR }}  # Usando la variable de entorno
